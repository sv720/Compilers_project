=============TESTCASE 4==============

Input file : compiler_tests/local_var/dual_var.c
Testing dual_var:
int f()
{
    int x;
    int y;
    x=1234;
    y=x;
    return y;
}
 
 ------------
OUTPUT PRINT: 
compiler_tests/local_var/dual_var.c <-> test/working/local_var/dual_var.s

Intermediate Language:
( ( int DEBUG id = DECALARATOR :fend of check ( int DECALARATOR :x )( int DECALARATOR :y )( VARAIBLE : x = 1234 )( VARAIBLE : y = VARAIBLE : x )( return VARAIBLE : y ) ) )

MIPS GENERATED:

.global f
#DEBUG Declarator: adding to map at addressf making map size = 1
lw $2,8($fp)
f:
addiu $sp,$sp,-8
sw $fp,4($sp)
move $25,$fp
move $fp,$sp
*/


/*

TESTCASE 4:

    int x;

addiu $sp,$sp,-4 
sw $25,0($fp) 
move $fp,$sp
#DEBUG Declare: adding to map at address x making map size = 2
sw $2,8($fp)
#DEBUG: reg of argument=2 x
#DEBUG Declarator: adding to map at addressx making map size = 2
lw $2,8($fp)

    int y;

addiu $sp,$sp,-4 
sw $25,0($fp) 
move $fp,$sp
#DEBUG Declare: adding to map at address y making map size = 3
sw $2,8($fp)
#DEBUG: reg of argument=2 y
#DEBUG Declarator: adding to map at addressy making map size = 3
lw $2,8($fp)

    x = 1234;

#DEBUG AssignOperator: in variables_map for x was 2, now 4
li $2,1234
#DEBUG AssignOperator: after right->mips, in variables_map for x was 2, now 4
sw $2,12($fp)
lw $2,12($fp)

    y = x;

#DEBUG AssignOperator: in variables_map for y was 3, now 4
lw $2,12($fp)
#DEBUG AssignOperator: after right->mips, in variables_map for y was 3, now 4
sw $2,8($fp)
lw $2,8($fp)

    return y;

lw $2,8($fp)

move $sp,$fp
lw $fp,4($sp)
move $sp,$25
jr $31
nop
0