#ifndef ast_expressionlist_hpp
#define ast_expressionlist_hpp

#include <string>
#include <iostream>
#include <cmath>
#include <vector>

class ExpressionList
    : public Expression
{
private:
    std::vector<ExpressionPtr> list;

protected:
    ExpressionList(ExpressionPtr first_elem)
        : list.pushback(first_elem);
    {}
public:


    virtual ~Operator()
    {
        delete left;
        delete right;
    }

    virtual void append(ExpressionPtr new_elem)
    {
        list.pushback(new_elem);
    }

    

    virtual void print(std::ostream &dst) const override
    {

        for (i : list){
            dst<<"( ";
            i->print(dst)
            dst<<" )";
        }
    }
};