Terminals unused in grammar

    T_VARIABLE


Grammar

    0 $accept: ROOT $end

    1 ROOT: EXPR

    2 EXPR: FUNCTION_DEFINITION '{' STATEMENT '}'

    3 FUNCTION_DEFINITION: RETURN_TYPE FUNCTION_NAME_ARGS

    4 FUNCTION_NAME_ARGS: T_IDENTIFIER '(' ')'

    5 STATEMENT: ASSIGN_DECLARE ';'

    6 ASSIGN_DECLARE: RETURN_TYPE ASSIGN

    7 ASSIGN: T_IDENTIFIER '=' T_NUMBER

    8 RETURN_TYPE: T_INT
    9            | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    '(' <string> (40) 4
    ')' <string> (41) 4
    ';' <string> (59) 5
    '=' (61) 7
    '{' <string> (123) 2
    '}' <string> (125) 2
    error (256)
    T_INT <string> (258) 8
    T_VOID <string> (259) 9
    T_IDENTIFIER <string> (260) 4 7
    T_NUMBER <number> (261) 7
    T_VARIABLE (262)


Nonterminals, with rules where they appear

    $accept (14)
        on left: 0
    ROOT (15)
        on left: 1
        on right: 0
    EXPR <expr> (16)
        on left: 2
        on right: 1
    FUNCTION_DEFINITION <expr> (17)
        on left: 3
        on right: 2
    FUNCTION_NAME_ARGS <expr> (18)
        on left: 4
        on right: 3
    STATEMENT <expr> (19)
        on left: 5
        on right: 2
    ASSIGN_DECLARE <expr> (20)
        on left: 6
        on right: 5
    ASSIGN <expr> (21)
        on left: 7
        on right: 6
    RETURN_TYPE <expr> (22)
        on left: 8 9
        on right: 3 6


State 0

    0 $accept: . ROOT $end

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    ROOT                 go to state 3
    EXPR                 go to state 4
    FUNCTION_DEFINITION  go to state 5
    RETURN_TYPE          go to state 6


State 1

    8 RETURN_TYPE: T_INT .

    $default  reduce using rule 8 (RETURN_TYPE)


State 2

    9 RETURN_TYPE: T_VOID .

    $default  reduce using rule 9 (RETURN_TYPE)


State 3

    0 $accept: ROOT . $end

    $end  shift, and go to state 7


State 4

    1 ROOT: EXPR .

    $default  reduce using rule 1 (ROOT)


State 5

    2 EXPR: FUNCTION_DEFINITION . '{' STATEMENT '}'

    '{'  shift, and go to state 8


State 6

    3 FUNCTION_DEFINITION: RETURN_TYPE . FUNCTION_NAME_ARGS

    T_IDENTIFIER  shift, and go to state 9

    FUNCTION_NAME_ARGS  go to state 10


State 7

    0 $accept: ROOT $end .

    $default  accept


State 8

    2 EXPR: FUNCTION_DEFINITION '{' . STATEMENT '}'

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    STATEMENT       go to state 11
    ASSIGN_DECLARE  go to state 12
    RETURN_TYPE     go to state 13


State 9

    4 FUNCTION_NAME_ARGS: T_IDENTIFIER . '(' ')'

    '('  shift, and go to state 14


State 10

    3 FUNCTION_DEFINITION: RETURN_TYPE FUNCTION_NAME_ARGS .

    $default  reduce using rule 3 (FUNCTION_DEFINITION)


State 11

    2 EXPR: FUNCTION_DEFINITION '{' STATEMENT . '}'

    '}'  shift, and go to state 15


State 12

    5 STATEMENT: ASSIGN_DECLARE . ';'

    ';'  shift, and go to state 16


State 13

    6 ASSIGN_DECLARE: RETURN_TYPE . ASSIGN

    T_IDENTIFIER  shift, and go to state 17

    ASSIGN  go to state 18


State 14

    4 FUNCTION_NAME_ARGS: T_IDENTIFIER '(' . ')'

    ')'  shift, and go to state 19


State 15

    2 EXPR: FUNCTION_DEFINITION '{' STATEMENT '}' .

    $default  reduce using rule 2 (EXPR)


State 16

    5 STATEMENT: ASSIGN_DECLARE ';' .

    $default  reduce using rule 5 (STATEMENT)


State 17

    7 ASSIGN: T_IDENTIFIER . '=' T_NUMBER

    '='  shift, and go to state 20


State 18

    6 ASSIGN_DECLARE: RETURN_TYPE ASSIGN .

    $default  reduce using rule 6 (ASSIGN_DECLARE)


State 19

    4 FUNCTION_NAME_ARGS: T_IDENTIFIER '(' ')' .

    $default  reduce using rule 4 (FUNCTION_NAME_ARGS)


State 20

    7 ASSIGN: T_IDENTIFIER '=' . T_NUMBER

    T_NUMBER  shift, and go to state 21


State 21

    7 ASSIGN: T_IDENTIFIER '=' T_NUMBER .

    $default  reduce using rule 7 (ASSIGN)
